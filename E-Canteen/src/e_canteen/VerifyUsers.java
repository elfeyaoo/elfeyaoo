/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package e_canteen;

import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Avadhoot
 */
public class VerifyUsers extends javax.swing.JFrame {

  private final DefaultTableModel model;

    private void fetchUserData() {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ecanteen?useSSL=false", "root", "@zgardi@n#1234");
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM user");

            model.setRowCount(0); // Clear existing rows

            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                String username = resultSet.getString("username");
                String mobileNumber = resultSet.getString("mobileNumber");
                String password = resultSet.getString("password");
                String securityQuestion = resultSet.getString("securityQuestion");
                String answer = resultSet.getString("answer");
                String moodleId = resultSet.getString("moodleId");
                String status = resultSet.getString("status");
                model.addRow(new Object[]{id, name, username, mobileNumber, password, securityQuestion, answer, moodleId, status});
            }

            resultSet.close();
            statement.close();
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void fetchVerifiedData() {
    try {
        Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ecanteen?useSSL=false", "root", "@zgardi@n#1234");
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT * FROM verified");

        DefaultTableModel verifiedTableModel = (DefaultTableModel) jTable4.getModel();
        verifiedTableModel.setRowCount(0); // Clear existing rows

        while (resultSet.next()) {
            int id = resultSet.getInt("id");
            String name = resultSet.getString("name");
            String username = resultSet.getString("username");
            String mobileNumber = resultSet.getString("mobileNumber");
            String password = resultSet.getString("password");
            String securityQuestion = resultSet.getString("securityQuestion");
            String answer = resultSet.getString("answer");
            String moodleId = resultSet.getString("moodleId");
            String status = resultSet.getString("status");
            if (status.equals("FALSE")) {
                String updateStatusQuery = "UPDATE verified SET status='TRUE' WHERE id=?";
                PreparedStatement updateStatusStatement = connection.prepareStatement(updateStatusQuery);
                updateStatusStatement.setInt(1, id);
                updateStatusStatement.executeUpdate();
            }
            verifiedTableModel.addRow(new Object[]{id, name, username, mobileNumber, password, securityQuestion, answer, moodleId, status});
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (Exception e) {
        e.printStackTrace();
    }
}



    /**
     * Creates new form AdminOrders
     */
    public VerifyUsers() {
        initComponents();
        model = (DefaultTableModel) jTable3.getModel();
        fetchUserData(); // Fetch data when the form is created
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1070, 600));
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));
        jPanel2.setLayout(null);

        jLabel10.setFont(new java.awt.Font("Algerian", 0, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 153, 255));
        jLabel10.setText("E-Canteen ");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(280, 30, 220, 48);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(150, 0, 930, 90);

        jTable3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "id", "name", "username", "mobileNumber", "password", "securityQuestion", "answer", "moodleId", "status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable3.getTableHeader().setReorderingAllowed(false);
        jTable3.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jTable3ComponentAdded(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setResizable(false);
            jTable3.getColumnModel().getColumn(0).setHeaderValue("id");
            jTable3.getColumnModel().getColumn(1).setResizable(false);
            jTable3.getColumnModel().getColumn(2).setResizable(false);
            jTable3.getColumnModel().getColumn(3).setResizable(false);
            jTable3.getColumnModel().getColumn(4).setResizable(false);
            jTable3.getColumnModel().getColumn(5).setResizable(false);
            jTable3.getColumnModel().getColumn(6).setResizable(false);
            jTable3.getColumnModel().getColumn(7).setResizable(false);
            jTable3.getColumnModel().getColumn(8).setResizable(false);
        }

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(20, 140, 1000, 130);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setLayout(null);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/close.png"))); // NOI18N
        jButton5.setText("BACK");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5);
        jButton5.setBounds(10, 10, 90, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 150, 90);

        jLabel3.setFont(new java.awt.Font("Swis721 Ex BT", 0, 16)); // NOI18N
        jLabel3.setText("Verified Users");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(20, 340, 150, 20);

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(900, 100, 72, 23);

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/login.png"))); // NOI18N
        jButton11.setText("SAVE DATA");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton11);
        jButton11.setBounds(360, 520, 120, 30);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/delete.png"))); // NOI18N
        jButton2.setText("DELETE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(540, 520, 160, 30);

        jTable4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "name", "username", "mobileNumber", "password", "securityQuestion", "answer", "moodleId", "status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable4.getTableHeader().setReorderingAllowed(false);
        jTable4.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jTable4ComponentAdded(evt);
            }
        });
        jScrollPane4.setViewportView(jTable4);
        if (jTable4.getColumnModel().getColumnCount() > 0) {
            jTable4.getColumnModel().getColumn(0).setResizable(false);
            jTable4.getColumnModel().getColumn(1).setResizable(false);
            jTable4.getColumnModel().getColumn(2).setResizable(false);
            jTable4.getColumnModel().getColumn(3).setResizable(false);
            jTable4.getColumnModel().getColumn(4).setResizable(false);
            jTable4.getColumnModel().getColumn(5).setResizable(false);
            jTable4.getColumnModel().getColumn(6).setResizable(false);
            jTable4.getColumnModel().getColumn(7).setResizable(false);
            jTable4.getColumnModel().getColumn(8).setResizable(false);
        }

        getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(20, 370, 1000, 130);

        jLabel4.setFont(new java.awt.Font("Swis721 Ex BT", 0, 16)); // NOI18N
        jLabel4.setText("Current Users");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(20, 110, 150, 20);

        jButton3.setText("Verify");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(910, 310, 72, 23);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        new AdminDash ().setVisible(true);
        dispose ();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTable3ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jTable3ComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable3ComponentAdded

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         fetchUserData();
         fetchVerifiedData();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ecanteen?useSSL=false", "root", "@zgardi@n#1234")) {
    for (int i = 0; i < model.getRowCount(); i++) {
        int id = (int) model.getValueAt(i, 0);
        String name = (String) model.getValueAt(i, 1);
        String username = (String) model.getValueAt(i, 2);
        String mobileNumber = (String) model.getValueAt(i, 3);
        String password = (String) model.getValueAt(i, 4);
        String securityQuestion = (String) model.getValueAt(i, 5);
        String answer = (String) model.getValueAt(i, 6);
        String moodleId = (String) model.getValueAt(i, 7);
        String status = (String) model.getValueAt(i, 8);

        String updateQuery = "UPDATE user SET name=?, username=?, mobileNumber=?, password=?, securityQuestion=?, answer=?, moodleId=?, status=? WHERE id=?";
        try (PreparedStatement updateStatement = connection.prepareStatement(updateQuery)) {
            updateStatement.setString(1, name);
            updateStatement.setString(2, username);
            updateStatement.setString(3, mobileNumber);
            updateStatement.setString(4, password);
            updateStatement.setString(5, securityQuestion);
            updateStatement.setString(6, answer);
            updateStatement.setString(7, moodleId);
            updateStatement.setString(8, status);
            updateStatement.setInt(9, id);  // The index for id is 9, not 0
            
            updateStatement.executeUpdate();
        }
    }
    JOptionPane.showMessageDialog(null, "Changes saved successfully!");
    fetchUserData();
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
    e.printStackTrace();
}
 // Refresh the data after saving
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable3.getSelectedRow();
    if (selectedRow != -1) {
    // Remove the selected row from the table model
    // You can add code here to delete the corresponding row from the database as well
    // For example:
    String username = (String) model.getValueAt(selectedRow, 2); // Assuming the username is in the second column
    String deleteQuery = "DELETE FROM user WHERE username = '" + username + "'";

    // Execute the delete query using a statement
    try {
        // Create a connection
        Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ecanteen?useSSL=false", "root", "@zgardi@n#1234");

        // Create a statement
        Statement statement = connection.createStatement();

        // Execute the query
        statement.executeUpdate(deleteQuery);

        // Close the connection
        statement.close();
        connection.close();

        JOptionPane.showMessageDialog(null, "Selected item deleted successfully!");

        // Update the table after deleting the data
        fetchUserData();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error deleting data from the database: " + e.getMessage());
        e.printStackTrace();
    }
} else {
    JOptionPane.showMessageDialog(null, "Please select an item to delete!");
}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable4ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jTable4ComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable4ComponentAdded

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
int selectedRow = jTable3.getSelectedRow();
if (selectedRow != -1) {
    try {
        Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ecanteen?useSSL=false", "root", "@zgardi@n#1234");
        String insertQuery = "INSERT INTO verified (id, name, username, mobileNumber, password, securityQuestion, answer, moodleId, status) " +
                             "SELECT id, name, username, mobileNumber, password, securityQuestion, answer, moodleId, status FROM user WHERE id = ?";
        PreparedStatement insertStatement = connection.prepareStatement(insertQuery);
        insertStatement.setInt(1, (int) model.getValueAt(selectedRow, 0)); // Assuming the id is in the first column

        int rowsInserted = insertStatement.executeUpdate();
        if (rowsInserted > 0) {
            // Update the status in the verified table from FALSE to TRUE
            String updateStatusQuery = "UPDATE verified SET status='TRUE' WHERE id=?";
            PreparedStatement updateStatusStatement = connection.prepareStatement(updateStatusQuery);
            updateStatusStatement.setInt(1, (int) model.getValueAt(selectedRow, 0)); // Assuming the id is in the first column
            updateStatusStatement.executeUpdate();

            // Delete the user from the user table
            String deleteQuery = "DELETE FROM user WHERE id=?";
            PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
            deleteStatement.setInt(1, (int) model.getValueAt(selectedRow, 0)); // Assuming the id is in the first column
            deleteStatement.executeUpdate();

            JOptionPane.showMessageDialog(null, "User verified, data transferred !");

            // Refresh the tables
            fetchUserData();
            fetchVerifiedData();
        } else {
            JOptionPane.showMessageDialog(null, "Failed to verify user!");
        }

        insertStatement.close();
        connection.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error verifying user and transferring data: " + e.getMessage());
        e.printStackTrace();
    }
} else {
    JOptionPane.showMessageDialog(null, "Please select a user to verify!");
}
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerifyUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerifyUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerifyUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerifyUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VerifyUsers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    // End of variables declaration//GEN-END:variables

}
